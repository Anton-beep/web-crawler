stages:
  - linting
  - unit tests
  - build
  - integration tests
  - deploy

linting:
  stage: linting
  image: golang:1.22-alpine
  script:
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.62.2
    - ./bin/golangci-lint --version
    - ./bin/golangci-lint run

unit tests:
  stage: unit tests
  needs: []
  image: golang:1.22-alpine
  script:
    - go mod download
    - cp configs/.env.template configs/.env
    - go test -count=1 -cover -v ./...

build compose file:
  stage: build
  needs: ["unit tests"]
  script:
    - docker compose -f deployments/docker-compose.yml down
    - docker compose -f deployments/docker-compose.yml build

build integration tests:
  stage: build
  needs: []
  script:
    - docker compose -f deployments/docker-compose-dev.yml down
    - docker compose -f deployments/docker-compose-dev.yml build

integration tests:
  stage: integration tests
  image: golang:1.22-alpine
  needs: ["build compose file", "build integration tests"]
  script:
    - docker compose -f deployments/docker-compose-dev.yml up -d
    - go mod download
    - cp configs/Docker.env.template configs/.env
    - chmod +x ./scripts/check_coverage.sh
    - ./scripts/check_coverage.sh

deploy job:
  stage: deploy
  needs: ["build compose file", "unit tests", "integration tests"]
  script:
    - docker compose -f ./deployments/docker-compose.yml down -v
    - docker volume prune -f
    - docker compose -f ./deployments/docker-compose.yml up -d
