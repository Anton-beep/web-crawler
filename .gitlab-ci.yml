stages:
  - linting
  - unit tests
  - build
  - integration tests
  - cleanup

linting:
  stage: linting
  image: golang:1.22-alpine
  script:
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.62.2
    - rm -rf frontend
    - ./bin/golangci-lint --version
    - ./bin/golangci-lint run -c configs/.golangci.yml

unit tests:
  stage: unit tests
  needs: []
  image: golang:1.22-alpine
  coverage: /total:\s+\(statements\)\s+\d+.\d+%/
  script:
    - cp configs/.env.template configs/.env
    - cp configs/Docker.env.template configs/Docker.env
    - go mod download
    - go test -v ./...

build integration tests:
  stage: build
  needs: []
  script:
    - cp configs/Docker.env.template configs/.env
    - docker rm -f test-container || true
    - docker build -t tests:latest -f build/integrationTests/Dockerfile ./

integration tests:
  stage: integration tests
  needs: ["build integration tests"]
  script:
    - cp configs/Docker.env.template configs/.env
    - docker compose -f deployments/docker-compose-dev.yml down
    - docker compose -f deployments/docker-compose-dev.yml up -d
    - docker run --network=deployments_service-network --name test-container tests:latest
  coverage: /total:\s+\(statements\)\s+\d+.\d+%/

cleanup:
  stage: cleanup
  when: always
  script:
    - echo "Cleaning up all containers and resources..."
    - docker compose -f deployments/docker-compose-dev.yml down || true
    - docker rm -f test-container || true
    - echo "Cleanup completed."